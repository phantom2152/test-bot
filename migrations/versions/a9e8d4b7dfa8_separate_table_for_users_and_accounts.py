"""Separate table for users and accounts

Revision ID: a9e8d4b7dfa8
Revises: 11adfe8a6f3f
Create Date: 2025-09-09 10:57:14.119520

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "a9e8d4b7dfa8"
down_revision: Union[str, Sequence[str], None] = "11adfe8a6f3f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("telegram_id", sa.Integer(), nullable=False),
        sa.Column("telegram_username", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("telegram_id"),
        if_not_exists=True,
    )
    # op.drop_index(op.f('access_tokens_telegram_id_key'), table_name='access_tokens', postgresql_ops={'telegram_id': None}, postgresql_using='prefix')
    # op.drop_table("access_tokens")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "access_tokens",
        sa.Column("id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("telegram_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "seedr_username", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "seedr_token", sa.VARCHAR(length=512), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("access_tokens_pkey")),
        sa.UniqueConstraint(
            "telegram_id",
            name=op.f("access_tokens_telegram_id_key"),
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("access_tokens_telegram_id_key"),
        "access_tokens",
        [sa.literal_column("telegram_id NULLS FIRST")],
        unique=True,
        postgresql_ops={"telegram_id": None},
        postgresql_using="prefix",
    )
    op.drop_table("users")
    # ### end Alembic commands ###
